@page "/users"
@inject HttpClient Http

<div class="w-full h-full flex flex-col pb-8">
    <Banner @ref="_banner">
        <div>@_lastErrorMessage</div>
    </Banner>
    
    <div class="w-stretch h-full flex flex-row space-x-8 mx-8 mt-8">
        <!-- Master list view  -->
        <div class="w-1/3 flex flex-col min-w-[300px] items-center justify-center">
            <div class="text-neutral-500 text-2xl pb-4">
                @if (_users is not null)
                {
                    <span class="text-neutral-700">Users (@(_users?.Count ?? 0))</span>
                }
                else
                {
                    <span class="text-neutral-700">Users</span>
                }
            </div>

            <ListBox>
                @if (_users == null || _isLoading)
                {
                    <LoadingIndicator/>
                }
                else if (_users.Count == 0)
                {
                    <div class="text-2xl text-neutral-700 text-center self-center">No Users</div>
                }
                else
                {
                    <div class="w-full h-full flex flex-col space-y-2">
                        @foreach (var user in _users)
                        {
                            <ListItem class='list-item' SelectedClass="list-item-active"
                                      IsSelected=@(_selectedUser == user)
                                      OnClick="@(() => OnUserSelected(user))">
                                <div class="flex flex-row px-2 py-2">
                                    <div class="w-1/2 text-left font-bold">
                                        @@@user.Username.ToLowerInvariant()
                                    </div>
                                    <div class="w-1/2 text-left">
                                        @user.DisplayName
                                    </div>
                                </div>
                            </ListItem>
                        }
                    </div>
                }
            </ListBox>

            <button class="w-full refresh-button mt-2" onclick="@FetchUsersAsync" disabled="@_isLoading">
                <div class="flex flex-row space-x-4 justify-center">
                    @if (_isLoading)
                    {
                        <span>Refreshing...</span>
                    }
                    else
                    {
                        <img src="images/refresh.svg" alt="refresh" width="24" height="24"/>
                        <span>Refresh</span>
                    }
                </div>
            </button>
        </div>

        <!-- Details view -->
        <div class="w-full flex flex-col">
            <div class="w-full flex flex-row space-x-4 justify-end">
                <button class="create-button">
                    Create User
                </button>
                <button class="delete-button" onclick="@DeleteSelectedUser" disabled="@(_selectedUser == null)">
                    Delete User
                </button>
            </div>
        </div>
    </div>
</div>

@code {

    private bool _isLoading;
    private IReadOnlyCollection<User>? _users;
    private User? _selectedUser;
    private Banner? _banner;
    private string _lastErrorMessage = string.Empty;
    private CancellationTokenSource? _cts;

    protected override async Task OnInitializedAsync()
    {
        await FetchUsersAsync();
    }

    private void OnUserSelected(User user)
    {
        _selectedUser= user;
        Console.WriteLine($"User @{user.Username} ({user.DisplayName}) was selected");
    }

    private async Task FetchUsersAsync()
    {
        _users = null;
        _isLoading = true;
        
        try
        {
            Console.WriteLine("Fetching users...");
            var results = await Http.GetFromJsonAsync<User[]>("users");

            // Add some delay to simulate a slow network
            await Task.Delay(300);

            _users = results ?? Array.Empty<User>();
            Console.WriteLine($"Fetched {_users.Count} user(s) successfully");
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task DeleteSelectedUser()
    {
        if (_selectedUser is null)
            return;

        var username = _selectedUser.Username;

        Console.WriteLine($"Deleting user @{username} ({_selectedUser.DisplayName})...");
        var response = await Http.DeleteAsync($"users/{username}");

        if (!response.IsSuccessStatusCode)
        {
            var errorMessage = $"Unable to delete user @{username} ({response.StatusCode})";
            
            ShowErrorBanner(errorMessage);
            return;
        }

        Console.WriteLine($"Deleted user @{username} ({_selectedUser.DisplayName}) successfully");

        _users = _users?.Where(u => u.Username != username).ToList();
        _selectedUser = null;
    }

    private void ShowErrorBanner(string message)
    {
        Console.WriteLine($"Error: {message}");

        _cts?.Cancel();
        _cts = new CancellationTokenSource();
        
        _lastErrorMessage = message;
        _banner?.ShowWithDelay(10, _cts.Token);
    }
}